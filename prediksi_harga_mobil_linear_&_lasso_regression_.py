# -*- coding: utf-8 -*-
"""Prediksi Harga Mobil-Linear & Lasso Regression .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11PK8GhFCGdtUkCYfUA6r81MoBhdNhN_g
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics
from sklearn.preprocessing import StandardScaler

"""**DATA COLLECTION AND PROCESSING**"""

#Import File
mobil_dataset = pd.read_csv('/content/car data.csv')

mobil_dataset.shape

mobil_dataset.size

mobil_dataset.head()

mobil_dataset.tail()

mobil_dataset.info()

mobil_dataset.isnull().sum()

#Memeriksa distribusi categorical data
print(mobil_dataset.Fuel_Type.value_counts())
print(mobil_dataset.Seller_Type.value_counts())
print(mobil_dataset.Transmission.value_counts())

"""**LABEL ENCODE**


1.   Petrol = 0
2.   Diesel = 1
1.   CNG    = 2



*   Dealer       = 0
*   Individual   = 1


*  Manual    =  0
*  Automatic =  1


"""

mobil_dataset.replace({'Fuel_Type':{'Petrol': 0, 'Diesel': 1, 'CNG': 2}, 'Seller_Type':{'Dealer': 0, 'Individual': 1}, 'Transmission': {'Manual': 0, 'Automatic': 1}}, inplace=True)

mobil_dataset.head()

"""**TRAIN TEST SPLIT**"""

#Spitting the data
x = mobil_dataset.drop(['Car_Name', 'Selling_Price'], axis=1)
y = mobil_dataset['Selling_Price']

x.head()

y.head()

print(x)

print(y)

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state=2)

"""**MODEL PREDIKSI**"""

from sklearn.linear_model import LinearRegression

# Membuat model
LinRegMod = LinearRegression()

# Melatih model dengan data training
LinRegMod.fit(x_train, y_train)

""" **MODEL EVALUATION**"""

#Prediction on Training Data
training_data_prediction = LinRegMod.predict(x_train)

#R Squared Error
error_score = metrics.r2_score(y_train, training_data_prediction)
print('R Squared error: ', error_score)

#Visualize the Actual Prices
plt.scatter(y_train, training_data_prediction)
plt.xlabel('Harga Sebenarnya')
plt.ylabel('Harga Prediksi')
plt.title('Harga Sebenarnya vs Harga Prediksi')
plt.show()

test_data_prediction = LinRegMod.predict(x_test)

error_skor = metrics.r2_score(y_test, test_data_prediction )
print('R Squared error: ', error_skor)

#Lasso Regression

# Membuat model
LasRegMod = Lasso()

# Melatih model dengan data training
LasRegMod.fit(x_train,y_train)

""" **MODEL EVALUATION**"""

#Prediction on Training Data
training_data_prediction = LasRegMod.predict(x_train)



#R Squared Error
error_score = metrics.r2_score(y_train, training_data_prediction)
print('R Squared error: ', error_score)

#Visualize the Actual Prices
plt.scatter(y_train, training_data_prediction)
plt.xlabel('Harga Sebenarnya')
plt.ylabel('Harga Prediksi')
plt.title('Harga Sebenarnya vs Harga Prediksi')
plt.show()

testing_data_prediction = LinRegMod.predict(x_test)

error_score = metrics.r2_score(y_test,testing_data_prediction)
print('R Squared error: ', error_score)

#Visualize the Actual Prices
plt.scatter(y_test, testing_data_prediction)
plt.xlabel('Harga Sebenarnya')
plt.ylabel('Harga Prediksi')
plt.title('Harga Sebenarnya vs Harga Prediksi')
plt.show()

